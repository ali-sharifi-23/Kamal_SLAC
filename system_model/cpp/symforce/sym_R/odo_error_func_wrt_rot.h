// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: odo_error_func_wrt_rot
 *
 * Args:
 *     t_i: Matrix31
 *     t_f: Matrix31
 *     R: Rot3
 *     s: Scalar
 *     t_odo: Matrix31
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix33
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 3, 3> OdoErrorFuncWrtRot(const Eigen::Matrix<Scalar, 3, 1>& t_i,
                                               const Eigen::Matrix<Scalar, 3, 1>& t_f,
                                               const sym::Rot3<Scalar>& R, const Scalar s,
                                               const Eigen::Matrix<Scalar, 3, 1>& t_odo,
                                               const Scalar epsilon) {
  // Total ops: 94

  // Unused inputs
  (void)t_i;
  (void)t_f;
  (void)epsilon;

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _R = R.Data();

  // Intermediate terms (26)
  const Scalar _tmp0 = 2 * _R[1];
  const Scalar _tmp1 = _R[0] * _tmp0;
  const Scalar _tmp2 = -_tmp1;
  const Scalar _tmp3 = 2 * _R[3];
  const Scalar _tmp4 = _R[2] * _tmp3;
  const Scalar _tmp5 = 2 * _R[0] * _R[2];
  const Scalar _tmp6 = _R[1] * _tmp3;
  const Scalar _tmp7 = _R[0] * _tmp3;
  const Scalar _tmp8 = -_tmp7;
  const Scalar _tmp9 = _R[2] * _tmp0;
  const Scalar _tmp10 = std::pow(_R[1], Scalar(2));
  const Scalar _tmp11 = -_tmp10;
  const Scalar _tmp12 = std::pow(_R[2], Scalar(2));
  const Scalar _tmp13 = _tmp11 + _tmp12;
  const Scalar _tmp14 = std::pow(_R[3], Scalar(2));
  const Scalar _tmp15 = -_tmp14;
  const Scalar _tmp16 = std::pow(_R[0], Scalar(2));
  const Scalar _tmp17 = _tmp15 + _tmp16;
  const Scalar _tmp18 = -_tmp9;
  const Scalar _tmp19 = -_tmp16;
  const Scalar _tmp20 = _tmp14 + _tmp19;
  const Scalar _tmp21 = -_tmp5;
  const Scalar _tmp22 = -_tmp6;
  const Scalar _tmp23 = -_tmp12;
  const Scalar _tmp24 = _tmp10 + _tmp23;
  const Scalar _tmp25 = -_tmp4;

  // Output terms (1)
  Eigen::Matrix<Scalar, 3, 3> _res;

  _res(0, 0) = -s * (t_odo(1, 0) * (_tmp5 + _tmp6) + t_odo(2, 0) * (_tmp2 + _tmp4));
  _res(1, 0) = -s * (t_odo(1, 0) * (_tmp8 + _tmp9) + t_odo(2, 0) * (_tmp13 + _tmp17));
  _res(2, 0) = -s * (t_odo(1, 0) * (_tmp13 + _tmp20) + t_odo(2, 0) * (_tmp18 + _tmp8));
  _res(0, 1) =
      -s * (t_odo(0, 0) * (_tmp21 + _tmp22) + t_odo(2, 0) * (_tmp11 + _tmp14 + _tmp16 + _tmp23));
  _res(1, 1) = -s * (t_odo(0, 0) * (_tmp18 + _tmp7) + t_odo(2, 0) * (_tmp1 + _tmp4));
  _res(2, 1) = -s * (t_odo(0, 0) * (_tmp17 + _tmp24) + t_odo(2, 0) * (_tmp22 + _tmp5));
  _res(0, 2) =
      -s * (t_odo(0, 0) * (_tmp1 + _tmp25) + t_odo(1, 0) * (_tmp10 + _tmp12 + _tmp15 + _tmp19));
  _res(1, 2) = -s * (t_odo(0, 0) * (_tmp20 + _tmp24) + t_odo(1, 0) * (_tmp2 + _tmp25));
  _res(2, 2) = -s * (t_odo(0, 0) * (_tmp7 + _tmp9) + t_odo(1, 0) * (_tmp21 + _tmp6));

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
