// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

#include <sym/rot3.h>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: odo_error_func_wrt_pos_f
 *
 * Args:
 *     Rot_i: Rot3
 *     t_i: Matrix31
 *     Rot_f: Rot3
 *     t_f: Matrix31
 *     Rot_odo: Rot3
 *     t_odo: Matrix31
 *     s: Scalar
 *     epsilon: Scalar
 *
 * Outputs:
 *     res: Matrix66
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 6> OdoErrorFuncWrtPosF(const sym::Rot3<Scalar>& Rot_i,
                                                const Eigen::Matrix<Scalar, 3, 1>& t_i,
                                                const sym::Rot3<Scalar>& Rot_f,
                                                const Eigen::Matrix<Scalar, 3, 1>& t_f,
                                                const sym::Rot3<Scalar>& Rot_odo,
                                                const Eigen::Matrix<Scalar, 3, 1>& t_odo,
                                                const Scalar s, const Scalar epsilon) {
  // Total ops: 569

  // Input arrays
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_i = Rot_i.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_f = Rot_f.Data();
  const Eigen::Matrix<Scalar, 4, 1>& _Rot_odo = Rot_odo.Data();

  // Intermediate terms (198)
  const Scalar _tmp0 = _Rot_f[2] * _Rot_i[0];
  const Scalar _tmp1 = (Scalar(1) / Scalar(2)) * _tmp0;
  const Scalar _tmp2 = _Rot_f[0] * _Rot_i[2];
  const Scalar _tmp3 = (Scalar(1) / Scalar(2)) * _tmp2;
  const Scalar _tmp4 = _Rot_f[1] * _Rot_i[3];
  const Scalar _tmp5 = (Scalar(1) / Scalar(2)) * _tmp4;
  const Scalar _tmp6 = _Rot_f[3] * _Rot_i[1];
  const Scalar _tmp7 = (Scalar(1) / Scalar(2)) * _tmp6;
  const Scalar _tmp8 = _tmp1 - _tmp3 + _tmp5 - _tmp7;
  const Scalar _tmp9 = _Rot_f[2] * _Rot_i[1];
  const Scalar _tmp10 = (Scalar(1) / Scalar(2)) * _tmp9;
  const Scalar _tmp11 = _Rot_f[0] * _Rot_i[3];
  const Scalar _tmp12 = (Scalar(1) / Scalar(2)) * _tmp11;
  const Scalar _tmp13 = _Rot_f[1] * _Rot_i[2];
  const Scalar _tmp14 = (Scalar(1) / Scalar(2)) * _tmp13;
  const Scalar _tmp15 = _Rot_f[3] * _Rot_i[0];
  const Scalar _tmp16 = (Scalar(1) / Scalar(2)) * _tmp15;
  const Scalar _tmp17 = _tmp10 - _tmp12 - _tmp14 + _tmp16;
  const Scalar _tmp18 = -_Rot_odo[0] * _tmp17;
  const Scalar _tmp19 = _Rot_f[2] * _Rot_i[3];
  const Scalar _tmp20 = (Scalar(1) / Scalar(2)) * _tmp19;
  const Scalar _tmp21 = _Rot_f[0] * _Rot_i[1];
  const Scalar _tmp22 = (Scalar(1) / Scalar(2)) * _tmp21;
  const Scalar _tmp23 = _Rot_f[1] * _Rot_i[0];
  const Scalar _tmp24 = (Scalar(1) / Scalar(2)) * _tmp23;
  const Scalar _tmp25 = _Rot_f[3] * _Rot_i[2];
  const Scalar _tmp26 = (Scalar(1) / Scalar(2)) * _tmp25;
  const Scalar _tmp27 = -_tmp20 - _tmp22 + _tmp24 + _tmp26;
  const Scalar _tmp28 = _Rot_f[2] * _Rot_i[2];
  const Scalar _tmp29 = _Rot_f[0] * _Rot_i[0];
  const Scalar _tmp30 = _Rot_f[1] * _Rot_i[1];
  const Scalar _tmp31 = _Rot_f[3] * _Rot_i[3];
  const Scalar _tmp32 = -Scalar(1) / Scalar(2) * _tmp28 - Scalar(1) / Scalar(2) * _tmp29 -
                        Scalar(1) / Scalar(2) * _tmp30 - Scalar(1) / Scalar(2) * _tmp31;
  const Scalar _tmp33 = _Rot_odo[3] * _tmp32;
  const Scalar _tmp34 = -_Rot_odo[2] * _tmp27 + _tmp33;
  const Scalar _tmp35 = -_tmp0 + _tmp2 - _tmp4 + _tmp6;
  const Scalar _tmp36 = _Rot_odo[1] * _tmp35;
  const Scalar _tmp37 = -_tmp11 - _tmp13 + _tmp15 + _tmp9;
  const Scalar _tmp38 = _Rot_odo[0] * _tmp37;
  const Scalar _tmp39 = -_tmp19 - _tmp21 + _tmp23 + _tmp25;
  const Scalar _tmp40 = _Rot_odo[2] * _tmp39;
  const Scalar _tmp41 = _tmp28 + _tmp29 + _tmp30 + _tmp31;
  const Scalar _tmp42 = _Rot_odo[3] * _tmp41;
  const Scalar _tmp43 = _tmp36 + _tmp38 + _tmp40 + _tmp42;
  const Scalar _tmp44 = std::fabs(_tmp43);
  const Scalar _tmp45 = 1 - epsilon;
  const Scalar _tmp46 = std::min<Scalar>(_tmp44, _tmp45);
  const Scalar _tmp47 = 1 - std::pow(_tmp46, Scalar(2));
  const Scalar _tmp48 = 2 * std::min<Scalar>(0, (((_tmp36 + _tmp38 + _tmp40 + _tmp42) > 0) -
                                                 ((_tmp36 + _tmp38 + _tmp40 + _tmp42) < 0))) +
                        1;
  const Scalar _tmp49 = _tmp48 * std::acos(_tmp46);
  const Scalar _tmp50 = 2 * _tmp49 / std::sqrt(_tmp47);
  const Scalar _tmp51 = _Rot_odo[1] * _tmp27;
  const Scalar _tmp52 = _Rot_odo[0] * _tmp32;
  const Scalar _tmp53 = _Rot_odo[3] * _tmp17 + _tmp52;
  const Scalar _tmp54 = _Rot_odo[2] * _tmp8 + _tmp51 + _tmp53;
  const Scalar _tmp55 =
      -_Rot_odo[0] * _tmp41 + _Rot_odo[1] * _tmp39 - _Rot_odo[2] * _tmp35 + _Rot_odo[3] * _tmp37;
  const Scalar _tmp56 = ((((-_tmp44 + _tmp45) > 0) - ((-_tmp44 + _tmp45) < 0)) + 1) *
                        (((_tmp43) > 0) - ((_tmp43) < 0));
  const Scalar _tmp57 = _tmp48 / _tmp47;
  const Scalar _tmp58 = _tmp56 * _tmp57;
  const Scalar _tmp59 = _tmp55 * _tmp58;
  const Scalar _tmp60 = _tmp46 * _tmp49 / (_tmp47 * std::sqrt(_tmp47));
  const Scalar _tmp61 = _tmp54 * _tmp56;
  const Scalar _tmp62 = _tmp60 * _tmp61;
  const Scalar _tmp63 =
      -_Rot_odo[0] * _tmp39 - _Rot_odo[1] * _tmp41 + _Rot_odo[2] * _tmp37 + _Rot_odo[3] * _tmp35;
  const Scalar _tmp64 = _tmp54 * _tmp58;
  const Scalar _tmp65 = _Rot_odo[1] * _tmp17;
  const Scalar _tmp66 = _Rot_odo[2] * _tmp32;
  const Scalar _tmp67 = _Rot_odo[3] * _tmp27 + _tmp66;
  const Scalar _tmp68 = _tmp60 * _tmp63;
  const Scalar _tmp69 =
      _Rot_odo[0] * _tmp35 - _Rot_odo[1] * _tmp37 - _Rot_odo[2] * _tmp41 + _Rot_odo[3] * _tmp39;
  const Scalar _tmp70 = _Rot_odo[0] * _tmp27;
  const Scalar _tmp71 = _Rot_odo[2] * _tmp17;
  const Scalar _tmp72 = _Rot_odo[1] * _tmp32;
  const Scalar _tmp73 = 2 * _tmp39;
  const Scalar _tmp74 = _tmp17 * _tmp73;
  const Scalar _tmp75 = 2 * _tmp41;
  const Scalar _tmp76 = _tmp75 * _tmp8;
  const Scalar _tmp77 = 2 * _tmp35;
  const Scalar _tmp78 = _tmp32 * _tmp77;
  const Scalar _tmp79 = 2 * _tmp37;
  const Scalar _tmp80 = _tmp27 * _tmp79;
  const Scalar _tmp81 = _tmp78 + _tmp80;
  const Scalar _tmp82 = 2 * _Rot_odo[1];
  const Scalar _tmp83 = _Rot_odo[2] * _tmp82;
  const Scalar _tmp84 = 2 * _Rot_odo[3];
  const Scalar _tmp85 = _Rot_odo[0] * _tmp84;
  const Scalar _tmp86 = Scalar(1.0) / (s);
  const Scalar _tmp87 = _tmp86 * t_odo(2, 0);
  const Scalar _tmp88 = -2 * std::pow(_Rot_odo[2], Scalar(2));
  const Scalar _tmp89 = -2 * std::pow(_Rot_odo[0], Scalar(2));
  const Scalar _tmp90 = _tmp86 * t_odo(1, 0);
  const Scalar _tmp91 = _Rot_odo[0] * _tmp82;
  const Scalar _tmp92 = _Rot_odo[2] * _tmp84;
  const Scalar _tmp93 = _tmp86 * t_odo(0, 0);
  const Scalar _tmp94 =
      _tmp87 * (_tmp83 + _tmp85) + _tmp90 * (_tmp88 + _tmp89 + 1) + _tmp93 * (_tmp91 - _tmp92);
  const Scalar _tmp95 = _tmp17 * _tmp77;
  const Scalar _tmp96 = _tmp27 * _tmp75;
  const Scalar _tmp97 = _tmp32 * _tmp73;
  const Scalar _tmp98 = _tmp79 * _tmp8 + _tmp97;
  const Scalar _tmp99 = 1 - 2 * std::pow(_Rot_odo[1], Scalar(2));
  const Scalar _tmp100 = _Rot_odo[1] * _tmp84;
  const Scalar _tmp101 = 2 * _Rot_odo[0] * _Rot_odo[2];
  const Scalar _tmp102 =
      _tmp87 * (_tmp89 + _tmp99) + _tmp90 * (_tmp83 - _tmp85) + _tmp93 * (_tmp100 + _tmp101);
  const Scalar _tmp103 = 4 * _tmp39;
  const Scalar _tmp104 = -_tmp103 * _tmp8;
  const Scalar _tmp105 = 4 * _tmp35;
  const Scalar _tmp106 = -_tmp105 * _tmp27;
  const Scalar _tmp107 =
      _tmp87 * (-_tmp100 + _tmp101) + _tmp90 * (_tmp91 + _tmp92) + _tmp93 * (_tmp88 + _tmp99);
  const Scalar _tmp108 = 2 * _Rot_f[1];
  const Scalar _tmp109 = _Rot_f[2] * _tmp108;
  const Scalar _tmp110 = 2 * _Rot_f[0];
  const Scalar _tmp111 = _Rot_f[3] * _tmp110;
  const Scalar _tmp112 = -_tmp111;
  const Scalar _tmp113 = _tmp109 + _tmp112;
  const Scalar _tmp114 = _Rot_f[3] * _tmp108;
  const Scalar _tmp115 = _Rot_f[2] * _tmp110;
  const Scalar _tmp116 = _tmp114 + _tmp115;
  const Scalar _tmp117 = std::pow(_Rot_f[1], Scalar(2));
  const Scalar _tmp118 = -_tmp117;
  const Scalar _tmp119 = std::pow(_Rot_f[3], Scalar(2));
  const Scalar _tmp120 = _tmp118 + _tmp119;
  const Scalar _tmp121 = std::pow(_Rot_f[0], Scalar(2));
  const Scalar _tmp122 = -_tmp121;
  const Scalar _tmp123 = std::pow(_Rot_f[2], Scalar(2));
  const Scalar _tmp124 = _tmp122 + _tmp123;
  const Scalar _tmp125 = _tmp120 + _tmp124;
  const Scalar _tmp126 = 4 * _tmp37;
  const Scalar _tmp127 = -_tmp126 * _tmp32;
  const Scalar _tmp128 = _tmp32 * _tmp75;
  const Scalar _tmp129 = -_tmp128;
  const Scalar _tmp130 = _tmp17 * _tmp79;
  const Scalar _tmp131 = _tmp27 * _tmp73;
  const Scalar _tmp132 = _tmp131 + _tmp77 * _tmp8;
  const Scalar _tmp133 = 2 * _Rot_f[2] * _Rot_f[3];
  const Scalar _tmp134 = _Rot_f[0] * _tmp108;
  const Scalar _tmp135 = -_tmp134;
  const Scalar _tmp136 = _tmp133 + _tmp135;
  const Scalar _tmp137 = -_tmp109;
  const Scalar _tmp138 = _tmp112 + _tmp137;
  const Scalar _tmp139 = -_tmp119;
  const Scalar _tmp140 = _tmp118 + _tmp121 + _tmp123 + _tmp139;
  const Scalar _tmp141 = _tmp128 + _tmp130;
  const Scalar _tmp142 = _tmp20 + _tmp22 - _tmp24 - _tmp26;
  const Scalar _tmp143 = -_tmp1 + _tmp3 - _tmp5 + _tmp7;
  const Scalar _tmp144 = _Rot_odo[3] * _tmp143 + _tmp72;
  const Scalar _tmp145 = _tmp56 * (_Rot_odo[0] * _tmp142 + _tmp144 + _tmp71);
  const Scalar _tmp146 = _tmp145 * _tmp55;
  const Scalar _tmp147 = _Rot_odo[0] * _tmp143;
  const Scalar _tmp148 = _tmp145 * _tmp57;
  const Scalar _tmp149 = -_Rot_odo[1] * _tmp143;
  const Scalar _tmp150 = _Rot_odo[2] * _tmp143;
  const Scalar _tmp151 = _tmp111 + _tmp137;
  const Scalar _tmp152 = -_tmp114;
  const Scalar _tmp153 = -_tmp115;
  const Scalar _tmp154 = _tmp152 + _tmp153;
  const Scalar _tmp155 = -_tmp123;
  const Scalar _tmp156 = _tmp121 + _tmp155;
  const Scalar _tmp157 = _tmp117 + _tmp139;
  const Scalar _tmp158 = _tmp156 + _tmp157;
  const Scalar _tmp159 = -_tmp103 * _tmp17;
  const Scalar _tmp160 = -_tmp105 * _tmp32;
  const Scalar _tmp161 = _tmp143 * _tmp73;
  const Scalar _tmp162 = _tmp142 * _tmp77;
  const Scalar _tmp163 = _tmp32 * _tmp79;
  const Scalar _tmp164 = _tmp17 * _tmp75;
  const Scalar _tmp165 = _tmp143 * _tmp77;
  const Scalar _tmp166 = _tmp142 * _tmp73;
  const Scalar _tmp167 = -_tmp126 * _tmp142;
  const Scalar _tmp168 = _tmp143 * _tmp79;
  const Scalar _tmp169 = _tmp142 * _tmp75;
  const Scalar _tmp170 = _tmp95 + _tmp97;
  const Scalar _tmp171 = _tmp161 + _tmp163;
  const Scalar _tmp172 = _tmp133 + _tmp134;
  const Scalar _tmp173 = _tmp115 + _tmp152;
  const Scalar _tmp174 = _tmp120 + _tmp156;
  const Scalar _tmp175 = -_tmp10 + _tmp12 + _tmp14 - _tmp16;
  const Scalar _tmp176 = _Rot_odo[1] * _tmp175 + _tmp147 + _tmp67;
  const Scalar _tmp177 = _tmp176 * _tmp56;
  const Scalar _tmp178 = _tmp177 * _tmp60;
  const Scalar _tmp179 = _tmp176 * _tmp58;
  const Scalar _tmp180 = -_tmp133;
  const Scalar _tmp181 = _tmp134 + _tmp180;
  const Scalar _tmp182 = _tmp109 + _tmp111;
  const Scalar _tmp183 = _tmp117 + _tmp119 + _tmp122 + _tmp155;
  const Scalar _tmp184 = -_tmp105 * _tmp175;
  const Scalar _tmp185 = -_tmp103 * _tmp32;
  const Scalar _tmp186 = _tmp27 * _tmp77;
  const Scalar _tmp187 = _tmp175 * _tmp75;
  const Scalar _tmp188 = _tmp165 + _tmp175 * _tmp79;
  const Scalar _tmp189 = _tmp135 + _tmp180;
  const Scalar _tmp190 = _tmp114 + _tmp153;
  const Scalar _tmp191 = _tmp124 + _tmp157;
  const Scalar _tmp192 = _tmp143 * _tmp75;
  const Scalar _tmp193 = _tmp175 * _tmp73 + _tmp78;
  const Scalar _tmp194 = -_tmp126 * _tmp143;
  const Scalar _tmp195 = 2 * _tmp117;
  const Scalar _tmp196 = 2 * _tmp123 - 1;
  const Scalar _tmp197 = 2 * _tmp121;

  // Output terms (1)
  Eigen::Matrix<Scalar, 6, 6> _res;

  _res(0, 0) = _tmp50 * (_Rot_odo[1] * _tmp8 + _tmp18 + _tmp34) - _tmp54 * _tmp59 + _tmp55 * _tmp62;
  _res(1, 0) =
      _tmp50 * (-_Rot_odo[0] * _tmp8 - _tmp65 + _tmp67) + _tmp61 * _tmp68 - _tmp63 * _tmp64;
  _res(2, 0) =
      _tmp50 * (_Rot_odo[3] * _tmp8 + _tmp70 - _tmp71 - _tmp72) + _tmp62 * _tmp69 - _tmp64 * _tmp69;
  _res(3, 0) = -_tmp102 * (_tmp95 + _tmp96 + _tmp98) - _tmp107 * (_tmp104 + _tmp106) -
               _tmp94 * (-_tmp74 - _tmp76 + _tmp81);
  _res(4, 0) = -_tmp102 * (_tmp129 - _tmp130 + _tmp132) - _tmp107 * (_tmp74 + _tmp76 + _tmp81) -
               _tmp113 * t_f(1, 0) + _tmp113 * t_i(1, 0) - _tmp116 * t_f(0, 0) +
               _tmp116 * t_i(0, 0) - _tmp125 * t_f(2, 0) + _tmp125 * t_i(2, 0) -
               _tmp94 * (_tmp104 + _tmp127);
  _res(5, 0) = -_tmp102 * (_tmp106 + _tmp127) - _tmp107 * (-_tmp95 - _tmp96 + _tmp98) -
               _tmp136 * t_f(0, 0) + _tmp136 * t_i(0, 0) - _tmp138 * t_f(2, 0) +
               _tmp138 * t_i(2, 0) - _tmp140 * t_f(1, 0) + _tmp140 * t_i(1, 0) -
               _tmp94 * (_tmp132 + _tmp141);
  _res(0, 1) = -_tmp146 * _tmp57 + _tmp146 * _tmp60 +
               _tmp50 * (_Rot_odo[3] * _tmp142 - _tmp147 + _tmp65 - _tmp66);
  _res(1, 1) = _tmp145 * _tmp68 - _tmp148 * _tmp63 +
               _tmp50 * (_Rot_odo[2] * _tmp142 + _tmp149 + _tmp18 + _tmp33);
  _res(2, 1) = _tmp145 * _tmp60 * _tmp69 - _tmp148 * _tmp69 +
               _tmp50 * (-_Rot_odo[1] * _tmp142 - _tmp150 + _tmp53);
  _res(3, 1) = -_tmp102 * (_tmp141 + _tmp165 + _tmp166) - _tmp107 * (_tmp159 + _tmp160) -
               _tmp151 * t_f(1, 0) + _tmp151 * t_i(1, 0) - _tmp154 * t_f(0, 0) +
               _tmp154 * t_i(0, 0) - _tmp158 * t_f(2, 0) + _tmp158 * t_i(2, 0) -
               _tmp94 * (-_tmp161 + _tmp162 + _tmp163 - _tmp164);
  _res(4, 1) = -_tmp102 * (-_tmp168 - _tmp169 + _tmp170) - _tmp107 * (_tmp162 + _tmp164 + _tmp171) -
               _tmp94 * (_tmp159 + _tmp167);
  _res(5, 1) = -_tmp102 * (_tmp160 + _tmp167) - _tmp107 * (_tmp129 + _tmp130 - _tmp165 + _tmp166) -
               _tmp172 * t_f(1, 0) + _tmp172 * t_i(1, 0) - _tmp173 * t_f(2, 0) +
               _tmp173 * t_i(2, 0) - _tmp174 * t_f(0, 0) + _tmp174 * t_i(0, 0) -
               _tmp94 * (_tmp168 + _tmp169 + _tmp170);
  _res(0, 2) =
      -_tmp176 * _tmp59 + _tmp178 * _tmp55 + _tmp50 * (-_Rot_odo[2] * _tmp175 + _tmp144 - _tmp70);
  _res(1, 2) = _tmp177 * _tmp68 - _tmp179 * _tmp63 +
               _tmp50 * (_Rot_odo[3] * _tmp175 + _tmp150 - _tmp51 - _tmp52);
  _res(2, 2) =
      _tmp178 * _tmp69 - _tmp179 * _tmp69 + _tmp50 * (_Rot_odo[0] * _tmp175 + _tmp149 + _tmp34);
  _res(3, 2) = -_tmp102 * (_tmp171 + _tmp186 + _tmp187) - _tmp107 * (_tmp184 + _tmp185) -
               _tmp181 * t_f(0, 0) + _tmp181 * t_i(0, 0) - _tmp182 * t_f(2, 0) +
               _tmp182 * t_i(2, 0) - _tmp183 * t_f(1, 0) + _tmp183 * t_i(1, 0) -
               _tmp94 * (_tmp129 - _tmp131 + _tmp188);
  _res(4, 2) = -_tmp102 * (-_tmp192 + _tmp193 - _tmp80) - _tmp107 * (_tmp128 + _tmp131 + _tmp188) -
               _tmp189 * t_f(1, 0) + _tmp189 * t_i(1, 0) - _tmp190 * t_f(2, 0) +
               _tmp190 * t_i(2, 0) - _tmp191 * t_f(0, 0) + _tmp191 * t_i(0, 0) -
               _tmp94 * (_tmp185 + _tmp194);
  _res(5, 2) = -_tmp102 * (_tmp184 + _tmp194) - _tmp107 * (_tmp171 - _tmp186 - _tmp187) -
               _tmp94 * (_tmp192 + _tmp193 + _tmp80);
  _res(0, 3) = 0;
  _res(1, 3) = 0;
  _res(2, 3) = 0;
  _res(3, 3) = _tmp195 + _tmp196;
  _res(4, 3) = _tmp136;
  _res(5, 3) = _tmp154;
  _res(0, 4) = 0;
  _res(1, 4) = 0;
  _res(2, 4) = 0;
  _res(3, 4) = _tmp189;
  _res(4, 4) = _tmp196 + _tmp197;
  _res(5, 4) = _tmp151;
  _res(0, 5) = 0;
  _res(1, 5) = 0;
  _res(2, 5) = 0;
  _res(3, 5) = _tmp190;
  _res(4, 5) = _tmp138;
  _res(5, 5) = _tmp195 + _tmp197 - 1;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
