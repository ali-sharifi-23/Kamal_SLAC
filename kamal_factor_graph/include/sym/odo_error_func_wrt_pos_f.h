// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Core>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: odo_error_func_wrt_pos_f
 *
 * Args:
 *     X_i: Matrix44
 *     X_f: Matrix44
 *     Rot_odo: Matrix33
 *     t_odo: Matrix31
 *     s: Scalar
 *
 * Outputs:
 *     res: Matrix6_16
 */
template <typename Scalar>
Eigen::Matrix<Scalar, 6, 16> OdoErrorFuncWrtPosF(const Eigen::Matrix<Scalar, 4, 4>& X_i,
                                                 const Eigen::Matrix<Scalar, 4, 4>& X_f,
                                                 const Eigen::Matrix<Scalar, 3, 3>& Rot_odo,
                                                 const Eigen::Matrix<Scalar, 3, 1>& t_odo,
                                                 const Scalar s) {
  // Total ops: 80

  // Unused inputs
  (void)X_f;
  (void)Rot_odo;
  (void)t_odo;
  (void)s;

  // Input arrays

  // Intermediate terms (22)
  const Scalar _tmp0 = Scalar(1.0) / (X_i(0, 0));
  const Scalar _tmp1 = X_i(1, 0) * _tmp0;
  const Scalar _tmp2 = -X_i(0, 3) * _tmp1 + X_i(1, 3);
  const Scalar _tmp3 = X_i(2, 0) * _tmp0;
  const Scalar _tmp4 = Scalar(1.0) / (-X_i(0, 1) * _tmp1 + X_i(1, 1));
  const Scalar _tmp5 = _tmp4 * (-X_i(0, 1) * _tmp3 + X_i(2, 1));
  const Scalar _tmp6 = _tmp1 * _tmp5 - _tmp3;
  const Scalar _tmp7 = -X_i(0, 2) * _tmp1 + X_i(1, 2);
  const Scalar _tmp8 = Scalar(1.0) / (-X_i(0, 2) * _tmp3 + X_i(2, 2) - _tmp5 * _tmp7);
  const Scalar _tmp9 = X_i(3, 0) * _tmp0;
  const Scalar _tmp10 = _tmp4 * (-X_i(0, 1) * _tmp9 + X_i(3, 1));
  const Scalar _tmp11 = _tmp8 * (-X_i(0, 2) * _tmp9 + X_i(3, 2) - _tmp10 * _tmp7);
  const Scalar _tmp12 = -X_i(0, 3) * _tmp3 + X_i(2, 3) - _tmp2 * _tmp5;
  const Scalar _tmp13 =
      Scalar(1.0) / (-X_i(0, 3) * _tmp9 + X_i(3, 3) - _tmp10 * _tmp2 - _tmp11 * _tmp12);
  const Scalar _tmp14 = _tmp13 * (_tmp1 * _tmp10 - _tmp11 * _tmp6 - _tmp9);
  const Scalar _tmp15 = _tmp8 * (-_tmp12 * _tmp14 + _tmp6);
  const Scalar _tmp16 = _tmp4 * (-_tmp1 - _tmp14 * _tmp2 - _tmp15 * _tmp7);
  const Scalar _tmp17 = _tmp0 * (-X_i(0, 1) * _tmp16 - X_i(0, 2) * _tmp15 - X_i(0, 3) * _tmp14 + 1);
  const Scalar _tmp18 = _tmp13 * (-_tmp10 + _tmp11 * _tmp5);
  const Scalar _tmp19 = _tmp8 * (-_tmp12 * _tmp18 - _tmp5);
  const Scalar _tmp20 = _tmp4 * (-_tmp18 * _tmp2 - _tmp19 * _tmp7 + 1);
  const Scalar _tmp21 = _tmp0 * (-X_i(0, 1) * _tmp20 - X_i(0, 2) * _tmp19 - X_i(0, 3) * _tmp18);

  // Output terms (1)
  Eigen::Matrix<Scalar, 6, 16> _res;

  _res.setZero();

  _res(0, 0) = _tmp17;
  _res(4, 0) = _tmp21;
  _res(1, 1) = _tmp17;
  _res(5, 1) = _tmp21;
  _res(2, 2) = _tmp17;
  _res(3, 3) = _tmp17;
  _res(0, 4) = _tmp16;
  _res(4, 4) = _tmp20;
  _res(1, 5) = _tmp16;
  _res(5, 5) = _tmp20;
  _res(2, 6) = _tmp16;
  _res(3, 7) = _tmp16;
  _res(0, 8) = _tmp15;
  _res(4, 8) = _tmp19;
  _res(1, 9) = _tmp15;
  _res(5, 9) = _tmp19;
  _res(2, 10) = _tmp15;
  _res(3, 11) = _tmp15;
  _res(0, 12) = _tmp14;
  _res(4, 12) = _tmp18;
  _res(1, 13) = _tmp14;
  _res(5, 13) = _tmp18;
  _res(2, 14) = _tmp14;
  _res(3, 15) = _tmp14;

  return _res;
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
